package iotus.core.crypto

import org.scalatest.{FunSpec, Matchers}

class CryptoSpec extends FunSpec with Matchers {

  // val config:Config = ConfigFactory.load("ldaptest.conf")
  // test data generated by running ldap tool slappasswd
  // slappasswd -s hey123
  val HASH1 = "{SSHA}h3FFDd1A9SC2AQ9DRwog0EbMDrr5NvZP"
  val HASH2 = "{SSHA}8IOH0VM6uEPD/u765Yfwwut6mLnu6UQP"
  val PW1 = "hey123"
  val PW2 = "hey123"
  val SALT1 = BaseEncoder.decoder.decode(HASH1.substring(6)).takeRight(4)
  val SALT2 = BaseEncoder.decoder.decode(HASH2.substring(6)).takeRight(4)

  val PHASH1 = "pbkdf2(1000,20,sha512)$ad75f71b70cc23f7$e34b95270e6886c49ebfd3c1d5d2711a69706dab"
  val PHASH2 = "pbkdf2(1000,20,sha512)$a18914702e0df5cd$3f3bf13cef91c9beb29c3176cf735b90095d291a"
  val PPW1 = "beta"
  val PPW2 = "p2016"
  val PSALT1 = PHASH1.split("\\$")(1).getBytes
  val PSALT2 = PHASH2.split("\\$")(1).getBytes

  describe("SSHAEncoder") {
    it("check_password should work") {
      val r1 = SSHAEncoder.check_password("{SSHA}8IOH0VM6uEPD/u765Yfwwut6mLnu6UQP", "hey123")
      println("check_password r1", r1)
      r1 shouldEqual true
      val r2 = SSHAEncoder.check_password(HASH1, PW1)
      println("check_password r2", r2)
      r2 shouldEqual true
    }
    it("encrypt with given salt should work") {
      val h1 = SSHAEncoder.encrypt(PW1, Some(SALT1))
      println("encrypt h1", h1)
      // check generated hash
      h1 shouldEqual HASH1
      val r1 = SSHAEncoder.check_password(h1, PW1)
      r1 shouldEqual true
      val h2 = SSHAEncoder.encrypt(PW2, Some(SALT2))
      println("encrypt h2", h2)
      // check generated hash
      h2 shouldEqual HASH2
      val r2 = SSHAEncoder.check_password(h2, PW2)
      r2 shouldEqual true
    }

    it("encrypt with randomly generated salt should work") {
      val h1 = SSHAEncoder.encrypt(PW1)
      println("encrypt h1", h1)
      // check generated hash
      val r1 = SSHAEncoder.check_password(h1, PW1)
      r1 shouldEqual true
      val h2 = SSHAEncoder.encrypt(PW2)
      println("encrypt h2", h2)
      // check generated hash
      val r2 = SSHAEncoder.check_password(h2, PW2)
      r2 shouldEqual true
    }
  }

  describe("PBKDF2Encoder") {

    it("check_password should work") {
      val r1 = PBKDF2Encoder.check_password(PHASH1, PPW1)
      println("check_password r1", r1)
      r1 shouldEqual true
      val r2 = PBKDF2Encoder.check_password(PHASH2, PPW2)
      println("check_password r2", r2)
      r2 shouldEqual true
    }

    it("encrypt with given salt should work") {
      val h1 = PBKDF2Encoder.encrypt(PPW1, Some(PSALT1))
      println("encrypt h1", h1)
      // check generated hash
      h1 shouldEqual PHASH1
      val r1 = PBKDF2Encoder.check_password(h1, PPW1)
      r1 shouldEqual true
      val h2 = PBKDF2Encoder.encrypt(PPW2, Some(PSALT2))
      println("encrypt h2", h2)
      // check generated hash
      h2 shouldEqual PHASH2
      val r2 = PBKDF2Encoder.check_password(h2, PPW2)
      r2 shouldEqual true
    }

    it("encrypt with randomly generated salt should work") {
      // sample output:
      // (encrypt h1,pbkdf2(1000,20,sha512)$b4190d7c7125856d$d3523c72f3450f8258bae66242ad055fd80f4383)
      // (encrypt h2,pbkdf2(1000,20,sha512)$7a3a09b1ffc2551d$45ba4e6bfff9c73243e2ebddff5342f110e95d26)
      val h1 = PBKDF2Encoder.encrypt(PPW1)
      println("encrypt h1", h1)
      val r1 = PBKDF2Encoder.check_password(h1, PPW1)
      r1 shouldEqual true
      val h2 = PBKDF2Encoder.encrypt(PPW2)
      println("encrypt h2", h2)
      val r2 = PBKDF2Encoder.check_password(h2, PPW2)
      r2 shouldEqual true
    }

  }
}
